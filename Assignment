{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNc81Ce0fe3NPeGiRYqOmMb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bhumika-tech-creator/-Bhumika-tech-creator/blob/main/Untitled4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 135,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjLqKiZShjMI",
        "outputId": "9684d878-6dc5-4cce-a4b9-ca4d77c845b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[11, 12, 13, 14, 50, 60]\n"
          ]
        }
      ],
      "source": [
        "L = [11, 12, 13, 14]\n",
        "L.append(50)\n",
        "L.append(60)\n",
        "print(L)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [11, 12, 13, 14, 50, 60]\n",
        "L.remove(11)\n",
        "L.remove(13)\n",
        "print(L)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gmqxGTaKhtHZ",
        "outputId": "17720d96-aaec-49ca-e929-be5a7424623a"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12, 14, 50, 60]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "L.sort()\n",
        "print(L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kc7Cx7PzhxLg",
        "outputId": "80cffc34-e431-46da-c4e3-4dc92cf3d94f"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12, 14, 50, 60]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "L.sort(reverse=True)\n",
        "print(L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dAH6IKdhh0_D",
        "outputId": "ac3cfa65-3149-41ff-d1c3-73fcd9de252b"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[60, 50, 14, 12]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "found = 13 in L\n",
        "print(found)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DnEXh1bah4hU",
        "outputId": "dde7d028-bb71-4490-95be-258e978fe66e"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "count = len(L)\n",
        "print(count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "spj5z4mvh8sg",
        "outputId": "492155a6-e834-4d76-d947-84ad039a7157"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "total_sum = sum(L)\n",
        "print(total_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GrB8EXjeh_7C",
        "outputId": "f11048e8-a262-4b78-f783-e71472cc9f2a"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "136\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "odd_sum = sum(x for x in L if x % 2 != 0)\n",
        "print(odd_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2MHfuUUPiD8V",
        "outputId": "a770906f-d373-4102-872c-551e6fc4ae4f"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "even_sum = sum(x for x in L if x % 2 == 0)\n",
        "print(even_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kHz2pgdkiI4a",
        "outputId": "fd8b83c0-925a-4f54-e758-cf95cc759f71"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "136\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "\n",
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    for i in range(2, int(n ** 0.5) + 1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "prime_sum = sum(x for x in L if is_prime(x))\n",
        "print(prime_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1aWBWNhDiMul",
        "outputId": "842895c0-c881-4a44-9f9e-c494e85110ec"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "L.clear()\n",
        "print(L)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ACD8mumViOwv",
        "outputId": "b929e80c-0699-4cf9-d2c9-a535ac0e255b"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [12, 14, 50, 60]\n",
        "del L\n"
      ],
      "metadata": {
        "id": "h_95OIZaiUJf"
      },
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1: 5.6, 2: 7.8, 3: 6.6, 4: 8.7, 5: 7.7}\n",
        "\n",
        "D[8] = 8.8\n",
        "print(\"(i)\", D)\n",
        "\n",
        "D.pop(2)\n",
        "print(\"(ii)\", D)\n",
        "\n",
        "print(\"(iii)\", 6 in D)\n",
        "\n",
        "print(\"(iv)\", len(D))\n",
        "\n",
        "\n",
        "print(\"(v)\", sum(D.values()))\n",
        "\n",
        "\n",
        "D[3] = 7.1\n",
        "print(\"(vi)\", D)\n",
        "\n",
        "D.clear()\n",
        "print(\"(vii)\", D)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KBHii2KtirtE",
        "outputId": "46783bce-13a6-4cc0-a19c-d8203f256c26"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(i) {1: 5.6, 2: 7.8, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "(ii) {1: 5.6, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "(iii) False\n",
            "(iv) 5\n",
            "(v) 37.4\n",
            "(vi) {1: 5.6, 3: 7.1, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "(vii) {}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "S1 = {10, 20, 30, 40, 50, 60}\n",
        "S2 = {40, 50, 60, 70, 80, 90}\n",
        "\n",
        "S1.add(55)\n",
        "S1.add(66)\n",
        "print(\"(i)\", S1)\n",
        "\n",
        "S1.discard(10)\n",
        "S1.discard(30)\n",
        "print(\"(ii)\", S1)\n",
        "\n",
        "print(\"(iii)\", 40 in S1)\n",
        "\n",
        "\n",
        "print(\"(iv)\", S1.union(S2))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S9a_ILX4kxsd",
        "outputId": "2e5add61-dd72-4e64-a2de-db4a6853c3e0"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(i) {50, 66, 20, 55, 40, 10, 60, 30}\n",
            "(ii) {50, 66, 20, 55, 40, 60}\n",
            "(iii) True\n",
            "(iv) {66, 70, 40, 80, 50, 20, 55, 90, 60}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "print(\"100 Random Strings (length 6 to 8):\")\n",
        "for _ in range(100):\n",
        "    length = random.randint(6, 8)\n",
        "    rand_str = ''.join(random.choices(string.ascii_letters, k=length))\n",
        "    print(rand_str)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_DwEBGgDk6iE",
        "outputId": "a09fa8f6-262f-4452-da6a-36bdc54659a3"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100 Random Strings (length 6 to 8):\n",
            "tvVOPM\n",
            "gNdPhUJR\n",
            "vnOVJPr\n",
            "mqAwqtJa\n",
            "bTqxAu\n",
            "xSKPdr\n",
            "wyweUr\n",
            "RArRWLPC\n",
            "CUlXwy\n",
            "CqZvLavt\n",
            "SJppqqtB\n",
            "qQxQxa\n",
            "BBQxehNU\n",
            "agySAojc\n",
            "rGRdrVj\n",
            "VJqczba\n",
            "AGBmNRJM\n",
            "ntlyvBS\n",
            "ssmGqJ\n",
            "QbFMJeKH\n",
            "dAOChFK\n",
            "gpncCAji\n",
            "ifrelM\n",
            "ELFnfiE\n",
            "alqFjgmI\n",
            "ESdtdDi\n",
            "FqRYjmwj\n",
            "WgqercO\n",
            "HgaQSz\n",
            "cHZIKp\n",
            "zKUIOIqr\n",
            "sshLuKw\n",
            "VslqTkG\n",
            "NfeiDgpY\n",
            "YHQuDg\n",
            "joOBkX\n",
            "xhImAQpa\n",
            "bSyybIpJ\n",
            "MXtLLN\n",
            "EYKOxKDh\n",
            "TrOyxsXf\n",
            "qatZWWw\n",
            "FOFYcbqN\n",
            "AytnynMW\n",
            "EOJdgKSk\n",
            "xSKfvGOz\n",
            "WsKSWb\n",
            "CKnBljtF\n",
            "hoWbWd\n",
            "Lsljairs\n",
            "tCbXLU\n",
            "rjqMJob\n",
            "DelmsB\n",
            "zWlfNCvS\n",
            "SGctOXc\n",
            "YDfNqGRr\n",
            "ocJRej\n",
            "ywiSTP\n",
            "zaYJeUZW\n",
            "IBXtBJJ\n",
            "gcLDKfPH\n",
            "yILfEC\n",
            "AxWAGDB\n",
            "QVqpZEPu\n",
            "XdLcmQUw\n",
            "EskglOzd\n",
            "VmKrWsKK\n",
            "KyxgeOK\n",
            "PaRULCF\n",
            "vGoPDEeK\n",
            "SreBuCis\n",
            "eRZcCrQ\n",
            "IaNLZDmP\n",
            "YUjbbs\n",
            "TCsggo\n",
            "wAwAIBS\n",
            "WJxSfgu\n",
            "sbIoDnQx\n",
            "SNeQHE\n",
            "kCkvqirc\n",
            "kHKcdTN\n",
            "BebtBoH\n",
            "LsqsStcg\n",
            "fupcIV\n",
            "wZeRMYM\n",
            "IPARUWP\n",
            "BWynuq\n",
            "OlvMaP\n",
            "JWqapp\n",
            "YIkWhAoY\n",
            "OaOcrb\n",
            "hGObcqd\n",
            "ornSuK\n",
            "ZfhBpET\n",
            "rIuLYU\n",
            "drKGCAW\n",
            "ipePdxgk\n",
            "XaAPsR\n",
            "IaVAwdy\n",
            "jIgnBjaM\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "print(\"Prime numbers between 600 and 800:\")\n",
        "for num in range(600, 801):\n",
        "    if is_prime(num):\n",
        "        print(num, end=\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zw8cDgzOlTUC",
        "outputId": "e27b0b14-caa3-4964-880a-614bdd804475"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prime numbers between 600 and 800:\n",
            "601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nNumbers divisible by both 7 and 9 between 100 and 1000:\")\n",
        "for num in range(100, 1001):\n",
        "    if num % 7 == 0 and num % 9 == 0:\n",
        "        print(num, end=\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6TSstvD4lcZj",
        "outputId": "e5619482-1b6f-4354-a459-40a2f8f2bc5b"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Numbers divisible by both 7 and 9 between 100 and 1000:\n",
            "126 189 252 315 378 441 504 567 630 693 756 819 882 945 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "# Create lists\n",
        "list1 = random.sample(range(10, 31), 10)\n",
        "list2 = random.sample(range(10, 31), 10)\n",
        "\n",
        "print(\"List 1:\", list1)\n",
        "print(\"List 2:\", list2)\n",
        "\n",
        "# (i) Common numbers\n",
        "common = list(set(list1) & set(list2))\n",
        "print(\"Common numbers:\", common)\n",
        "\n",
        "# (ii) Unique numbers in both lists\n",
        "unique = list(set(list1) ^ set(list2))\n",
        "print(\"Unique numbers:\", unique)\n",
        "\n",
        "# (iii) Minimum in both lists\n",
        "print(\"Minimum in List 1:\", min(list1))\n",
        "print(\"Minimum in List 2:\", min(list2))\n",
        "\n",
        "# (iv) Maximum in both lists\n",
        "print(\"Maximum in List 1:\", max(list1))\n",
        "print(\"Maximum in List 2:\", max(list2))\n",
        "\n",
        "# (v) Sum of both lists\n",
        "print(\"Sum of List 1:\", sum(list1))\n",
        "print(\"Sum of List 2:\", sum(list2))\n",
        "print(\"Total Sum:\", sum(list1) + sum(list2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lHpTJDSQmELa",
        "outputId": "17738536-93fa-48c9-c766-311d7fa00c73"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "List 1: [14, 28, 29, 22, 25, 26, 18, 15, 27, 24]\n",
            "List 2: [10, 20, 19, 30, 21, 12, 15, 18, 22, 23]\n",
            "Common numbers: [18, 22, 15]\n",
            "Unique numbers: [10, 12, 14, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30]\n",
            "Minimum in List 1: 14\n",
            "Minimum in List 2: 10\n",
            "Maximum in List 1: 29\n",
            "Maximum in List 2: 30\n",
            "Sum of List 1: 228\n",
            "Sum of List 2: 190\n",
            "Total Sum: 418\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "\n",
        "L = [random.randint(100, 900) for _ in range(100)]\n",
        "print(\"Random Numbers List:\", L)\n",
        "\n",
        "# (i) Count all odd numbers\n",
        "odd_numbers = [x for x in L if x % 2 != 0]\n",
        "print(\"Odd numbers:\", odd_numbers)\n",
        "print(\"Count of odd numbers:\", len(odd_numbers))\n",
        "\n",
        "# (ii) Count all even numbers\n",
        "even_numbers = [x for x in L if x % 2 == 0]\n",
        "print(\"Even numbers:\", even_numbers)\n",
        "print(\"Count of even numbers:\", len(even_numbers))\n",
        "\n",
        "# (iii) Count all prime numbers\n",
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5) + 1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "prime_numbers = [x for x in L if is_prime(x)]\n",
        "print(\"Prime numbers:\", prime_numbers)\n",
        "print(\"Count of prime numbers:\", len(prime_numbers))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bQwzh5w4xN2p",
        "outputId": "2709ebc2-2171-4ea7-f2d9-f66a3fa8f067"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Numbers List: [626, 532, 557, 372, 476, 888, 628, 731, 509, 150, 668, 620, 339, 284, 113, 335, 572, 140, 102, 839, 279, 180, 733, 630, 641, 572, 537, 560, 562, 131, 663, 422, 610, 622, 697, 549, 864, 664, 629, 480, 291, 529, 828, 705, 636, 504, 570, 715, 831, 799, 345, 606, 369, 767, 579, 799, 287, 457, 135, 503, 114, 470, 733, 779, 812, 452, 465, 357, 454, 333, 682, 235, 526, 686, 894, 516, 310, 718, 144, 229, 513, 357, 793, 462, 241, 398, 250, 547, 212, 334, 741, 109, 111, 863, 659, 374, 646, 161, 793, 254]\n",
            "Odd numbers: [557, 731, 509, 339, 113, 335, 839, 279, 733, 641, 537, 131, 663, 697, 549, 629, 291, 529, 705, 715, 831, 799, 345, 369, 767, 579, 799, 287, 457, 135, 503, 733, 779, 465, 357, 333, 235, 229, 513, 357, 793, 241, 547, 741, 109, 111, 863, 659, 161, 793]\n",
            "Count of odd numbers: 50\n",
            "Even numbers: [626, 532, 372, 476, 888, 628, 150, 668, 620, 284, 572, 140, 102, 180, 630, 572, 560, 562, 422, 610, 622, 864, 664, 480, 828, 636, 504, 570, 606, 114, 470, 812, 452, 454, 682, 526, 686, 894, 516, 310, 718, 144, 462, 398, 250, 212, 334, 374, 646, 254]\n",
            "Count of even numbers: 50\n",
            "Prime numbers: [557, 509, 113, 839, 733, 641, 131, 457, 503, 733, 229, 241, 547, 109, 863, 659]\n",
            "Count of prime numbers: 16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"}\n",
        "\n",
        "# Write keys and values to file\n",
        "with open(\"dictionary_output.txt\", \"w\") as f:\n",
        "    for key, value in D.items():\n",
        "        f.write(f\"{key}, {value}\\n\")\n",
        "\n",
        "print(\"Dictionary written to 'dictionary_output.txt'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E04lkfOpxqAb",
        "outputId": "d24a8446-6a2c-45c3-ba85-8053c124a0e4"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dictionary written to 'dictionary_output.txt'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n",
        "\n",
        "# Open file for writing\n",
        "with open(\"lengths.txt\", \"w\") as f:\n",
        "    for item in L:\n",
        "        f.write(f\"{item}, {len(item)}\\n\")\n",
        "\n",
        "# To show output\n",
        "with open(\"lengths.txt\", \"r\") as f:\n",
        "    print(f.read())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pcbaujoeyIXf",
        "outputId": "8e3ef865-c2eb-4b9c-97c7-2c453a03fb93"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "One, 3\n",
            "Two, 3\n",
            "Three, 5\n",
            "Four, 4\n",
            "Five, 4\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "\n",
        "def generate_random_string(length):\n",
        "    return ''.join(random.choices(string.ascii_letters, k=length))\n",
        "\n",
        "\n",
        "with open(\"random_strings.txt\", \"w\") as f:\n",
        "    for _ in range(100):\n",
        "        length = random.randint(10, 15)\n",
        "        rand_str = generate_random_string(length)\n",
        "        f.write(rand_str + \"\\n\")\n",
        "\n",
        "with open(\"random_strings.txt\", \"r\") as f:\n",
        "    for i in range(5):  # Print first 5 random strings\n",
        "        print(f.readline().strip())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PAIXWAuXy2EV",
        "outputId": "68610246-677b-49d4-959b-316fb9edab3a"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "lxhXXmNOoGun\n",
            "nhWLpLXSlFQ\n",
            "AOxUMQeloOTRUHa\n",
            "cCJLgrvJSLq\n",
            "hzJlJBcWGktk\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to check prime number\n",
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5)+1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "# Generate and write prime numbers to file\n",
        "with open(\"prime_600_to_800.txt\", \"w\") as file:\n",
        "    for num in range(600, 801):\n",
        "        if is_prime(num):\n",
        "            file.write(str(num) + \"\\n\")\n",
        "\n",
        "print(\" Prime numbers between 600 and 800 have been written to 'prime_600_to_800.txt'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6nomWNb2zI43",
        "outputId": "dda9ba78-5200-4bc7-a5ca-9335ac5747d5"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Prime numbers between 600 and 800 have been written to 'prime_600_to_800.txt'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "total = sum(range(1, 1000001))\n",
        "\n",
        "end_time = time.time()\n",
        "\n",
        "time_taken = end_time - start_time\n",
        "print(\" Time taken by the program: {:.6f} seconds\".format(time_taken))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ugvdw6ZQzzg1",
        "outputId": "31c215d8-3dde-4629-ea76-efd0c57112a9"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Time taken by the program: 0.019388 seconds\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sizes = [5000, 10000, 15000, 20000, 25000]\n",
        "times = []\n",
        "\n",
        "for size in sizes:\n",
        "    L = [random.randint(1, 100000) for _ in range(size)]\n",
        "\n",
        "    start = time.time()\n",
        "    L.sort()\n",
        "    end = time.time()\n",
        "\n",
        "    t_taken = end - start\n",
        "    times.append(t_taken)\n",
        "    print(f\"Sorted {size} elements in {t_taken:.6f} seconds\")\n",
        "\n",
        "plt.plot(sizes, times, marker='o')\n",
        "plt.xlabel(\"Number of elements in list\")\n",
        "plt.ylabel(\"Time Taken (seconds)\")\n",
        "plt.title(\"Sorting Time vs Number of Elements\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "bxCAVuKZ0T6D",
        "outputId": "22543594-4d92-44d8-f655-2daab365b927"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted 5000 elements in 0.001345 seconds\n",
            "Sorted 10000 elements in 0.002441 seconds\n",
            "Sorted 15000 elements in 0.009808 seconds\n",
            "Sorted 20000 elements in 0.004502 seconds\n",
            "Sorted 25000 elements in 0.005681 seconds\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "students = {\n",
        "    \"Alice\": [78, 85, 90, 82, 88],\n",
        "    \"Bob\": [60, 65, 58, 62, 64],\n",
        "    \"Charlie\": [90, 92, 88, 94, 89]\n",
        "}\n",
        "\n",
        "averages = {name: sum(marks)/len(marks) for name, marks in students.items()}\n",
        "\n",
        "max_student = max(averages, key=averages.get)\n",
        "min_student = min(averages, key=averages.get)\n",
        "\n",
        "print(\"Average marks of students:\")\n",
        "for name, avg in averages.items():\n",
        "    print(f\"{name}: {avg:.2f}\")\n",
        "\n",
        "print(f\"\\nStudent with maximum average: {max_student} ({averages[max_student]:.2f})\")\n",
        "print(f\"Student with minimum average: {min_student} ({averages[min_student]:.2f})\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S4f_EyTn0sRc",
        "outputId": "648fc891-2f1f-4e24-e70d-2f35bfeec99e"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average marks of students:\n",
            "Alice: 84.60\n",
            "Bob: 61.80\n",
            "Charlie: 90.60\n",
            "\n",
            "Student with maximum average: Charlie (90.60)\n",
            "Student with minimum average: Bob (61.80)\n"
          ]
        }
      ]
    }
  ]
}
